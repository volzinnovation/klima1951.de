# -*- coding: utf-8 -*-
"""DE-Cities-Top-K

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/123XudlDgABRqHrs5jPE6CGlLO2rBSjOp
"""

k=100 # Top

import requests, json

if (k>2056):
  k = 2056

# 1. Fetch the full dataset (2056 cities) from the CC0-licensed repo
url = "https://raw.githubusercontent.com/pensnarik/german-cities/master/germany.json"
resp = requests.get(url)
cities = resp.json()

# 2. Sort descending by population
cities_sorted = sorted(cities, key=lambda c: int(c["population"]), reverse=True)

# 3. Take the top 100 and reformat
top100 = []
for c in cities_sorted[:k]:
    top100.append({
        "city":       c["name"],
        "longitude":  int(float(c["coords"]["lon"])*100),
        "latitude":   int(float(c["coords"]["lat"])*100)
    })
top100 = sorted(top100, key=lambda top100: top100["city"])
# 4. Output as a single JSON object
result = {"cities": top100}
print(json.dumps(result, indent=2, ensure_ascii=False))

# Commented out IPython magic to ensure Python compatibility.
# %pip install openpyxl

import json
import pandas as pd

# 1. Read the data from the Excel file
excel_file_path = 'DE_Gemeinden_Koordinate_Bevoelkerung.xlsx' # Assuming the file is in the content directory
df = pd.read_excel(excel_file_path)

# 2. Filter the data to include only rows where 'Auswahl' is 1
filtered_df = df[df['Auswahl'] == 1].copy()

# 3. Sort descending by population
filtered_df['Bevölkerung'] = pd.to_numeric(filtered_df['Bevölkerung'], errors='coerce')
cities_sorted_df = filtered_df.sort_values(by='Bevölkerung', ascending=False)

# 4. Take the top k and reformat
top_k = []
for index, row in cities_sorted_df.head(k).iterrows():
    top_k.append({
        "city":       row["GEN"],
        "longitude":  int(row["LON_DEZ"] * 100),
        "latitude":   int(row["LAT_DEZ"] * 100)
    })

# 5. Sort top_k by city before outputting
top_k_sorted = sorted(top_k, key=lambda x: x["city"])

# 6. Output as a single JSON object
result = {"cities": top_k_sorted}

# 7. Write the result to a JSON file
output_file_path = 'cities.json'
with open(output_file_path, 'w', encoding='utf-8') as f:
    json.dump(result, f, indent=2, ensure_ascii=False)

print(f"Result written to {output_file_path}")